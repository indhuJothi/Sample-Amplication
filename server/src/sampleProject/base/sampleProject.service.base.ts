/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, SampleProject, User } from "@prisma/client";

export class SampleProjectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SampleProjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SampleProjectFindManyArgs>
  ): Promise<number> {
    return this.prisma.sampleProject.count(args);
  }

  async findMany<T extends Prisma.SampleProjectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SampleProjectFindManyArgs>
  ): Promise<SampleProject[]> {
    return this.prisma.sampleProject.findMany(args);
  }
  async findOne<T extends Prisma.SampleProjectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SampleProjectFindUniqueArgs>
  ): Promise<SampleProject | null> {
    return this.prisma.sampleProject.findUnique(args);
  }
  async create<T extends Prisma.SampleProjectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SampleProjectCreateArgs>
  ): Promise<SampleProject> {
    return this.prisma.sampleProject.create<T>(args);
  }
  async update<T extends Prisma.SampleProjectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SampleProjectUpdateArgs>
  ): Promise<SampleProject> {
    return this.prisma.sampleProject.update<T>(args);
  }
  async delete<T extends Prisma.SampleProjectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SampleProjectDeleteArgs>
  ): Promise<SampleProject> {
    return this.prisma.sampleProject.delete(args);
  }

  async getUser(parentId: string): Promise<User | null> {
    return this.prisma.sampleProject
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
